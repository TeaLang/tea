---
The builtin libs for Tea

@created 2019/02 by Benny Lin
@copyright YJ Technology Ltd. All rights reserved.
---

public LF = "\n"

#php isset(expr Any) Bool
#php is_int(val) Bool
#php is_array(val) Bool
#php is_numeric(val) Bool

#php empty(expr Any) Bool
#php var_dump(expr0 Any, expr1 Any = #default, expr2 Any = #default, expr3 Any = #default)
#php print_r(expr, is_return Bool = #default)
#php header(info String, replace = true, http_response_code Int = #default)

// dates & times
#php time() Int
#php date(format String, timestamp Int = #default) String
#php strtotime(datetime, now Int = #default) Int

#php str_repeat(input, multiplier Int) String

// php builtin constants
#php __DIR__ String
#php __FILE__ String
#php __LINE__ UInt
#php __CLASS__ UInt
#php __FUNCTION__ UInt

// php super variables
#php $_GET Dict
#php $_POST Dict
#php $_COOKIE Dict
#php $_SERVER Dict

// exceptions
#php Exception {
	public construct(message String, code Int = 0)
	public getCode() Int
	public getMessage() String
}

#php ErrorException: Exception {}
#php LogicException: Exception {}

// helper functions

public is_uint(val) Bool {
	return is_int(val) and val >= 0
}

public uint_ensure(num Int) {
	if num < 0 {
		throw ErrorException('Cannot use $num as a UInt value')
	}

	return num
}

public is_strict_array(it) Bool {
	if not is_array(it) {
		return false
	}

	if empty(it) {
		return true
	}

	keys = array_keys(it)
	return keys === array_keys(keys)
}

public is_strict_dict(it) Bool {
	if not is_array(it) or empty(it) {
		return false
	}

	if not isset(it[0]) {
		return true
	}

	keys = array_keys(it)
	return keys !== array_keys(keys)
}

public xrange(start Int, end Int, step = 1) {
	i = start
	if step > 0 {
		// step greate than 0, increment
		while i <= end {
			yield i
			i += step
		}
	}
	elseif (step < 0) {
		// step less than 0, decrement
		while i >= end {
			yield i
			i += step
		}
	}
	else {
		throw LogicException('Parameter "step" should not be 0');
	}
}

// file
#php file_exists(filename String) Bool
#php dirname(path String, levels UInt = #default) String
#php basename(path String, suffix String = #default) String
#php realpath(path String) String
#php file_get_contents(file String) String
#php file_put_contents(file String, data String, flags Int = #default) UInt
#php FILE_APPEND Int
#php LOCK_EX Int

// math
#php max(n1, n2, n3 = #default) Any
#php min(n1, n2, n3 = #default) Any
#php abs(val) Float
#php round(val, precision = 0) Float
#php ceil(val) Int
#php floor(val) Int

// string
#php trim(str, char_mask String = #default) String
#php rtrim(str, char_mask String = #default) String
#php ltrim(str, char_mask String = #default) String

// with default charset
#php iconv_strlen(str String) UInt
#php iconv_substr(str String, start Int, length Int = #default) String

// first pos in default charset
#php iconv_strpos(str String, search String, offset Int = 0) Int  // would return false on not found

// last pos in default charset
#php iconv_strrpos(str String, search String, offset Int = 0) Int  // would return false on not found

#php mb_strwidth(str String, encoding String = #default)
#php mb_strtoupper(str String) String
#php mb_strtolower(str String) String

// bytes mode functions
#php strlen(str String) UInt
#php substr(str String, start Int, length Int = #default) String
#php strpos(master String, search String, offset Int = 0) Int  // would return false on not found
#php strrpos(master String, search String, offset Int = 0) Int  // would return false on not found
#php strtoupper(str String) String
#php strtolower(str String) String

// replace in binary mode
#php strtr(master String, changes Dict) String
#php str_replace(search, replacement, master String) String
public _str_replace(master String, search String, replacement String) {
	return str_replace(search, replacement, master);
}

#php implode(glue String, pieces) String
#php explode(delimiter String, master String) String.Array

// array
#php count(array) UInt
#php in_array(needle, haystack, strict Bool = false) Bool
#php array_reverse(array)
#php array_map(callback Callable, items Array) Array
#php array_filter(items Array, callback Callable, flag Int = #default) Array
#php array_reduce(items Array, callback Callable, initial Any = #default)

// index array
#php array_slice(master Array, offset Int, length UInt = none) Array
#php array_unshift(master Array, item Any) UInt
#php array_shift(master Array) Any
#php array_push(master Array, item Any) UInt
#php array_pop(master Array) Any
#php array_search(search, master, strict = false) Int

public _array_search(master Array, search) Int {
	return array_search(search, master, true)
}

public array_last_index(array Array) UInt {
	return count(array) - 1
}

#php array_key_exists(key, arr Dict) Bool

// assoc array
#php array_keys(array) String.Array
#php array_values(array) Array
#php array_column(record Dict.Array, key String) Array
#php array_sum(nums) Float

public dict_get(dict Dict, key String) {
	return dict[key] ?? none
}

public dict_search(master Dict, search) String {
	key = array_search(search, master, true)
	return key === false ? none : key  // would return none on not found
}

#php JSON_UNESCAPED_UNICODE Int
#php JSON_PRETTY_PRINT Int
#php json_encode(data, flags Int = 0, depth UInt = 512) String
#php json_decode(data, assoc Bool = false, depth UInt = 512, flags Int = 0) Dict

#php ENT_QUOTES Int
#php htmlspecialchars(string, flags Int = #default, encoding String = #default, double_encode = #default) String
#php htmlspecialchars_decode(string, flags Int = #default) String

public html_encode(string, flags = ENT_QUOTES) {
	return htmlspecialchars(string, flags)
}

public html_decode(string, flags = ENT_QUOTES) {
	return htmlspecialchars_decode(string, flags)
}

// regex
#php PREG_SPLIT_DELIM_CAPTURE Int
#php preg_match(regex Regex, subject String, matches mut Array = #default, flags Int = #default, offset Int = #default) Bool
#php preg_match_all(regex Regex, subject String, matches mut Array = #default, flags Int = #default, offset Int = #default) Bool
#php preg_split(regex Regex , subject String, limit Int = #default, flags Int = #default) Array
public regex_test(regex Regex, subject String) Bool {
	return preg_match(regex, subject) ? true : false
}
public regex_capture_one(regex Regex, subject String) String.Array {
	var matches String.Array
	count = preg_match(regex, subject, matches)
	return count === 0 ? none : matches
}
public regex_capture_all(regex Regex, subject String) String.Array.Array {
	var matches String.Array.Array
	count = preg_match_all(regex, subject, matches)
	return count === 0 ? none : matches
}

// 所有 masked function 在定义时都需要考虑参数的顺序，参数的运行时序不一致可能会导致问题
// 考虑禁止在调用函数的参数中改变数据（需要推断出可能改变数据的函数，或直接禁止参数带函数调用），纯表达式?
// 部分实现中，参数编译后顺序有变化，使用时应避免当前字符串被delimiter表达式所改变

// public IShareAble {
// 	vshare() Object
// }

// public ICloneAble {
// 	vclone() Object
// }

#tea MetaType {}
#tea UnionType {}

// primitive types

#tea Void {} // cannot use for value

#tea None {}

#tea Any: String {} // extends String to use the String properties/methods

#tea String {
	// process in dist native mode
	masked length UInt => strlen(this)
	masked find(str String, offset Int = #default) => strpos(this, str, offset)
	masked find_last(str String, offset Int = #default) => strrpos(this, str, offset)
	masked copy(start Int, length Int = #default) => substr(this, start, length)
	masked lower_case() => strtolower(this)
	masked upper_case() => strtoupper(this)

	// process in byte mode
	masked byte_length UInt => strlen(this)
	masked byte_find(str String, offset Int = #default) => strpos(this, str, offset)
	masked byte_find_last(str String, offset Int = #default) => strrpos(this, str, offset)
	masked byte_copy(start Int, length Int = #default) => substr(this, start, length)
	masked byte_lower() => strtolower(this)
	masked byte_upper() => strtoupper(this)

	// process in rune mode
	masked rune_length UInt => iconv_strlen(this)
	masked rune_find(str String, offset Int = #default) => iconv_strpos(this, str, offset)
	masked rune_find_last(str String, offset Int = #default) => iconv_strrpos(this, str, offset)
	masked rune_copy(start Int, length Int = #default) => iconv_substr(this, start, length)
	masked rune_lower() => mb_strtolower(this)
	masked rune_upper() => mb_strtoupper(this)

	// other
	masked count_width() UInt => mb_strwidth(this)
	masked split(delimiter String) => explode(delimiter, this)
	masked replace(search String, replacement String) => _str_replace(this, search, replacement)
}

#tea Int: String {
	masked abs() UInt => abs(this)
}

#tea UInt: Int {}

#tea Float {
	masked abs() => abs(this)
	masked ceil() => ceil(this)
	masked floor() => floor(this)
	masked round(precision = 0) => round(this, precision)
}

#tea Bool {}

#tea Array {
	masked length UInt => count(this)
	masked end UInt => array_last_index(this)

	masked has_value(val) => in_array(val, this)

	masked find(val) => _array_search(this, val) // find the index with supported value

	masked copy(start Int, length UInt = #default) Array => array_slice(this, start, length)
	masked reversed() Array => array_reverse(this)

	masked unshift(item) => array_unshift(this, item)
	masked shift() => array_shift(this)
	masked push(item) => array_push(this, item)
	masked pop() => array_pop(this)

	// callback(item)
	masked map(callback Callable) => array_map(callback, this)

	// callback(carry, item)
	masked reduce(callback Callable, initial Any = #default) => array_reduce(this, callback, initial)

	// callback(item) Bool
	masked filter(callback Callable) => array_filter(this, callback)

	masked join(glue String = LF) => implode(glue, this)
}

#tea Dict {
	masked length => count(this)

	masked keys() => array_keys(this)
	masked values() => array_values(this)

	masked has_key(key String) => array_key_exists(key, this)
	masked has_value(val) => in_array(val, this)

	masked get(key String) => dict_get(this, key)
	masked find(val) => dict_search(this, val) // find the key with supported value

	masked join(glue String = LF) => implode(glue, this)
}

#tea Chan {
	masked length => count(this)
}

// primitive types end

#tea Regex {
	// match in target string, returns is matched
	masked test(string String) Bool => regex_test(this, string)

	// use this pattern to untie a string, returns the untied items
	masked untie(string String) String.Array => preg_split(this, string)

	// match in target string, returns the first captured item
	masked capture_one(string String) String.Array => regex_capture_one(this, string)

	// match in target string, returns the all captured items
	masked capture_all(string String) String.Array.Array => regex_capture_all(this, string)
}

#tea XView: String {}   // accept IView

#tea Callable {}

#tea Iterable {} // accept IIterator

public IView {}

#php Iterator as IIterator {
	current() Any
	key() String
	next()
	rewind()
	valid() Bool
}

#php Generator as IGenerator: IIterator {
	send(value Any) Any
	throw(exception Exception)
}

// end
