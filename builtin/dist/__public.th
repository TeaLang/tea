// the public declarations

#unit tea/builtin

public LF String = "\n"
public __DIR__ String
public __FILE__ String
public __LINE__ UInt
public __CLASS__ UInt
public __FUNCTION__ UInt
public FILE_APPEND Int
public LOCK_EX Int
public JSON_UNESCAPED_UNICODE Int
public ENT_QUOTES Int
public PREG_SPLIT_DELIM_CAPTURE Int

#php isset(expr Any) Bool

#php empty(expr Any) Bool

#php var_dump(expr0 Any, expr1 Any = #default, expr2 Any = #default, expr3 Any = #default)

#php print_r(expr Any, is_return Bool = #default)

#php header(info String, replace Bool = true, http_response_code Int = #default)

#php time() Int

#php date(format String, timestamp Int = #default) String

#php str_repeat(input Any, multiplier Int) String

#php is_int(val Any) Bool

#php is_array(val Any) Bool

#php Exception {
	public construct(message String, code Int = 0)
	public getCode() Int
	public getMessage() String
}

#php ErrorException: Exception {
	// no any
}

#php LogicException: Exception {
	// no any
}

public is_uint(val Any) Bool

public uint_ensure(num Int) Int

public is_strict_array(it Any) Bool

public is_strict_dict(it Any) Bool

public xrange(start Int, end Int, step Int = 1) IGenerator

#php file_exists(filename String) Bool

#php dirname(path String, levels UInt = #default) String

#php basename(path String, suffix String = #default) String

#php realpath(path String) String

#php file_get_contents(file String) String

#php file_set_contents(file String, data String, flags Int = #default) UInt

#php max(n1 Any, n2 Any, n3 Any = #default) Any

#php min(n1 Any, n2 Any, n3 Any = #default) Any

#php abs(val Any) Float

#php round(val Any, precision Int = 0) Float

#php ceil(val Any) Int

#php floor(val Any) Int

#php trim(str Any, char_mask String = #default) String

#php rtrim(str Any, char_mask String = #default) String

#php ltrim(str Any, char_mask String = #default) String

#php iconv_strlen(str String) UInt

#php iconv_substr(str String, start Int, length Int = #default) String

#php iconv_strpos(str String, search String, offset Int = 0) Int

#php iconv_strrpos(str String, search String, offset Int = 0) Int

#php mb_strwidth(str String, encoding String = #default)

#php mb_strtoupper(str String) String

#php mb_strtolower(str String) String

#php strlen(str String) UInt

#php substr(str String, start Int, length Int = #default) String

#php strpos(master String, search String, offset Int = 0) Int

#php strrpos(master String, search String, offset Int = 0) Int

#php strtoupper(str String) String

#php strtolower(str String) String

#php strtr(master String, changes Dict) String

#php str_replace(search Any, replacement Any, master String) String

public _str_replace(master String, search String, replacement String) String

#php implode(glue String, pieces Any) String

#php explode(delimiter String, master String) Array

#php count(array Any) UInt

#php in_array(needle Any, haystack Any, strict Bool = false) Bool

#php array_reverse(array Any)

#php array_map(callback Callable, items Array) Array

#php array_filter(items Array, callback Callable, flag Int = #default) Array

#php array_reduce(items Array, callback Callable, initial Any = #default)

#php array_slice(master Array, offset Int, length UInt = none) Array

#php array_unshift(master Array, item Any) UInt

#php array_shift(master Array) Any

#php array_push(master Array, item Any) UInt

#php array_pop(master Array) Any

#php array_search(search Any, master Any, strict Bool = false) Int

public _array_search(master Array, search Any) Int

public array_last_index(array Array) UInt

#php array_key_exists(key Any, arr Dict) Bool

#php unset(target Any)

#php array_keys(array Any) String.Array

#php array_values(array Any) Array

#php array_column(record Dict.Array, key String) Array

#php array_sum(nums Any) Float

public dict_get(dict Dict, key String) Any

public dict_search(master Dict, search Any) String

#php json_encode(data Any, flags Int = 0, depth UInt = 512) String

#php json_decode(data Any, assoc Bool = false, depth UInt = 512, flags Int = 0) Dict

#php htmlspecialchars(string Any, flags Int = #default, encoding String = #default, double_encode Any = #default) String

#php htmlspecialchars_decode(string Any, flags Int = #default) String

public html_encode(string Any, flags Int = ENT_QUOTES) String

public html_decode(string Any, flags Int = ENT_QUOTES) String

#php preg_match(regex Regex, subject String, matches mut Array = #default, flags Int = #default, offset Int = #default) Bool

#php preg_match_all(regex Regex, subject String, matches mut Array = #default, flags Int = #default, offset Int = #default) Bool

#php preg_split(regex Regex, subject String, limit Int = #default, flags Int = #default) Array

public regex_test(regex Regex, subject String) Bool

public regex_capture_one(regex Regex, subject String) String.Array

public regex_capture_all(regex Regex, subject String) String.Array.Array

#tea MetaType {
	// no any
}

#tea UnionType {
	// no any
}

#tea Void {
	// no any
}

#tea None {
	// no any
}

#tea Any: String {
	// no any
}

#tea String {
	masked length UInt
	masked find(str String, offset Int = #default) Int
	masked find_last(str String, offset Int = #default) Int
	masked copy(start Int, length Int = #default) String
	masked lower_case() String
	masked upper_case() String
	masked byte_length UInt
	masked byte_find(str String, offset Int = #default) Int
	masked byte_find_last(str String, offset Int = #default) Int
	masked byte_copy(start Int, length Int = #default) String
	masked byte_lower() String
	masked byte_upper() String
	masked rune_length UInt
	masked rune_find(str String, offset Int = #default) Int
	masked rune_find_last(str String, offset Int = #default) Int
	masked rune_copy(start Int, length Int = #default) String
	masked rune_lower() String
	masked rune_upper() String
	masked count_width() UInt
	masked split(delimiter String) Array
	masked replace(search String, replacement String) String
}

#tea Int: String {
	masked abs() UInt
}

#tea UInt: Int {
	// no any
}

#tea Float {
	masked abs() Float
	masked ceil() Int
	masked floor() Int
	masked round(precision Int = 0) Float
}

#tea Bool {
	// no any
}

#tea Array {
	masked length UInt
	masked end UInt
	masked has_value(val Any) Bool
	masked find(val Any) Int
	masked copy(start Int, length UInt = #default) Array
	masked reversed() Array
	masked unshift(item Any) UInt
	masked shift() Any
	masked push(item Any) UInt
	masked pop() Any
	masked map(callback Callable) Array
	masked reduce(callback Callable, initial Any = #default)
	masked filter(callback Callable) Array
	masked join(glue String = LF) String
}

#tea Dict {
	masked length UInt
	masked keys() String.Array
	masked values() Array
	masked has_key(key String) Bool
	masked has_value(val Any) Bool
	masked get(key String) Any
	masked find(val Any) String
	masked join(glue String = LF) String
}

#tea Regex {
	masked test(string String) Bool
	masked untie(string String) String.Array
	masked capture_one(string String) String.Array
	masked capture_all(string String) String.Array.Array
}

#tea XView: String {
	// no any
}

#tea Callable {
	// no any
}

#tea Iterable {
	// no any
}

public IView {
	// no any
}

#php Iterator as IIterator {
	current() Any
	key() String
	next()
	rewind()
	valid() Bool
}

#php Generator as IGenerator: IIterator {
	send(value Any) Any
	throw(exception Exception)
}

// program end
