---
The builtin libs for Tea

@created 2019/02 by Benny
@copyright YJ Technology Ltd. All rights reserved.
---

public LF = "\n"

// helper functions

public is_uint(val) Bool {
	return is_int(val) and val >= 0
}

public uint_ensure(num Int) {
	if num < 0 {
		throw ErrorException('Cannot use ${num} as a UInt value')
	}

	return num
}

public html_escape(str String?) String {
	return str === none ? '' : htmlspecialchars(str)
}

public html_unescape(str String?) String {
	return str === none ? '' : htmlspecialchars_decode(str)
}

// public interface Sharable {
// 	share() Object
// }

// public interface Clonable {
// 	clone() Object
// }

public type MetaType {}

public type UnionType {}

public type Void {}

public type None {}

public type Any {}

public _std_split(it String, separator String) {
	return explode(separator, it)
}

public _std_replace(it String, search, replacement) {
	return str_replace(search, replacement, it);
}

// processing using byte mode
public type Bytes {
	masked length UInt => strlen(this)
	masked find(str String, offset Int = #default) => strpos(this, str, offset)
	masked find_last(str String, offset Int = #default) => strrpos(this, str, offset)
	masked copy(start Int, length UInt = #default) => substr(this, start, length)
}

// processing through default charset using char/rune mode
public type String {
	masked length UInt => mb_strlen(this)
	masked find(str String, offset Int = #default) => mb_strpos(this, str, offset)
	masked find_last(str String, offset Int = #default) => mb_strrpos(this, str, offset)
	masked copy(start Int, length UInt = #default) => mb_substr(this, start, length)
	masked contains(val String) => str_contains(this, val)
	masked lowercase() => mb_strtolower(this)
	masked uppercase() => mb_strtoupper(this)
	masked split(separator String) => _std_split(this, separator)
	masked replace(search, replacement) => _std_replace(this, search, replacement)

	masked trim(characters String = #default) => trim(this, characters)
	masked ltrim(characters String = #default) => ltrim(this, characters)
	masked rtrim(characters String = #default) => rtrim(this, characters)
}

public type Pures: String {
	//
}

public type Int {
	masked abs() UInt => abs(this)
}

public type UInt: Int {}

public type Float {
	masked abs() => abs(this)
	masked ceil() => ceil(this)
	masked floor() => floor(this)
	masked round(precision = 0) => round(this, precision)
}

public type Bool {}

// public _last_index(array Array) UInt {
// 	return count(array) - 1
// }

public _has(it Array|Dict, key String|Int) {
	return array_key_exists(key, it)
}

public _vals_contains(it Array|Dict, val, strict Bool = false) {
	return in_array(val, it, strict)
}

public _array_find(it Array, val)  {
	return list_search(val, it, true)
	// return key === false ? false : key
}

public _std_array_map(it Array, callback (item Any) Any) {
	return array_map(callback, it)
}

public _std_join(it Array|Dict, separator String) {
	return implode(separator, it)
}

public type Array {
	masked length UInt => count(this)
	// masked end UInt => _last_index(this)

	masked has(key Int) => _has(this, key)
	masked contains(val) => _vals_contains(this, val)
	masked find(val) => _array_find(this, val) // find the index for supported value

	masked join(separator String = LF) => _std_join(this, separator)

	masked copy(start Int, length UInt = #default) Array => array_slice(this, start, length)
	masked reversed() Array => array_reverse(this)

	masked unshift(item) => array_unshift(this, item)
	masked shift() => array_shift(this)
	masked push(item) => array_push(this, item)
	masked pop() => array_pop(this)

	// callback(item)
	masked map(callback (item) Any) => _std_array_map(this, callback)

	// callback(item) Bool
	masked filter(callback (item) Any) => array_filter(this, callback)

	// callback(carry, item)
	masked reduce(callback (carry, item) Any, initial Any = #default) => array_reduce(this, callback, initial)
}

// key maybe Intï¼Œcast to String
public _dict_find(it Dict, val) {
	return dict_search(val, it, true)
	// return key === false ? false : key#String
}

public _dict_get(it Dict, key String|Int) {
	return it[key] ?? none
}

public type Dict {
	masked length => count(this)

	masked has(key String) => _has(this, key)
	masked contains(val) => _vals_contains(this, val)
	masked find(val) => _dict_find(this, val) // find the key with supported value

	masked join(separator String = LF) => _std_join(this, separator)

	masked get(key String|Int) => _dict_get(this, key)
	masked keys() => array_keys(this)
	masked values() => array_values(this)

	masked replace(replacement Dict) => dict_replace(this, replacement)
}

public type Object {
	//
}

public _regex_test(regex Regex, subject String) Bool {
	return preg_match(regex, subject) ? true : false
}

public _regex_capture(regex Regex, subject String) String.Array? {
	var result String.Array
	count = preg_match(regex, subject, result)
	return count === 0 ? none : result
}

public _regex_capture_all(regex Regex, subject String) String.Array.Array? {
	var results String.Array.Array
	count = preg_match_all(regex, subject, results)
	return results
}

public type Regex {
	// match in target string, returns is matched
	masked test(string String) Bool => _regex_test(this, string)

	// use this pattern to separate a string, returns the separated items
	masked separate(string String) String.Array => preg_split(this, string)

	// match the target string and returns the first matching item
	masked capture(string String) String.Array => _regex_capture(this, string)

	// match the target string and returns all matching items
	masked capture_all(string String) String.Array.Array => _regex_capture_all(this, string)
}

// use for processing XView
public _build_attributes(items Dict, additions Dict = none) String {
	if additions !== none {
		items = items.replace(additions)
	}

	list = []
	for key, val in items {
		if val is None or val === false {
			continue
		}

		list[] = val === true ? key : '$key="${htmlspecialchars(val#String)}"'
	}

	return implode(' ', list)
}

public type XView {}   // accept IView

public type Callable {}

public type Iterable {} // accept Iterator

public interface IView {}

// end
