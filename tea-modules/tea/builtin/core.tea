---
The builtin libs for Tea

@created 2019/02 by Benny
@copyright YJ Technology Ltd. All rights reserved.
---

public LF = "\n"

#php func isset(expr Any) Bool
#php func is_int(val) Bool
#php func is_array(val) Bool
#php func is_numeric(val) Bool

#php func empty(expr Any) Bool
#php func var_dump(expr0 Any, expr1 Any = #default, expr2 Any = #default, expr3 Any = #default)
#php func print(expr) Int
#php func print_r(expr, is_return Bool = #default)
#php func header(info String, replace = true, http_response_code Int = #default)

// dates & times
#php func time() Int
#php func date(format String, timestamp Int = #default) String
#php func strtotime(datetime, now Int = #default) Int

#php func str_repeat(input, multiplier Int) String

// php builtin constants
#php const __DIR__ String
#php const __FILE__ String
#php const __LINE__ UInt
#php const __CLASS__ UInt
#php const __FUNCTION__ UInt

// php super variables, unsupported, use filter_input function instead
// #php $_GET Dict
// #php $_POST Dict
// #php $_COOKIE Dict
// #php $_SERVER Dict

// the function to get value of $_GET/$_POST/$_COOKIE/$_ENV/$_SERVER
// input methods
#php const INPUT_GET Int
#php const INPUT_POST Int
#php const INPUT_COOKIE Int
#php const INPUT_ENV Int
#php const INPUT_SERVER Int
// filter types
#php const FILTER_INT Int
#php const FILTER_EMAIL Int

#php func filter_input(type Int, key String, filter Int = #default, options Dict = #default) Any

// exceptions
#php class Exception {
	public construct(message String, code Int = 0)
	public getCode() Int
	public getMessage() String
}

#php class ErrorException: Exception {}
#php class LogicException: Exception {}

// helper functions

public is_uint(val) Bool {
	return is_int(val) and val >= 0
}

public uint_ensure(num Int) {
	if num < 0 {
		throw ErrorException('Cannot use $num as a UInt value')
	}

	return num
}

public is_strict_array(it) Bool {
	if not is_array(it) {
		return false
	}

	if empty(it) {
		return true
	}

	keys = array_keys(it)
	return keys === array_keys(keys)
}

public is_strict_dict(it) Bool {
	if not is_array(it) or empty(it) {
		return false
	}

	if not isset(it[0]) {
		return true
	}

	keys = array_keys(it)
	return keys !== array_keys(keys)
}

public xrange(start Int, end Int, step = 1) {
	i = start
	if step > 0 {
		// step greate than 0, increment
		while i <= end {
			yield i
			i += step
		}
	}
	elseif (step < 0) {
		// step less than 0, decrement
		while i >= end {
			yield i
			i += step
		}
	}
	else {
		throw LogicException('Parameter "step" should not be 0');
	}
}

// file
#php func file_exists(filename) Bool
#php func dirname(path, levels UInt = #default) String
#php func basename(path, suffix String = #default) String
#php func realpath(path) String
#php func chdir(dir) Bool
#php func unlink(file) Bool
#php func file_get_contents(file) String
#php func file_put_contents(file, data String, flags Int = #default) UInt
#php const FILE_APPEND Int
#php const LOCK_EX Int

// math
#php func pow(num, exponent) UInt|Int|Float
#php func max(n1, n2, n3 = #default) Any
#php func min(n1, n2, n3 = #default) Any
#php func abs(val) Float
#php func round(val, precision = 0) Float
#php func ceil(val) Int
#php func floor(val) Int

// string
#php func trim(str, char_mask String = #default) String
#php func rtrim(str, char_mask String = #default) String
#php func ltrim(str, char_mask String = #default) String

// with default charset
#php func iconv_strlen(str String) UInt
#php func iconv_substr(str String, start Int, length Int = #default) String

// first pos in default charset
#php func iconv_strpos(str String, search String, offset Int = 0) Int  // would return false on not found

// last pos in default charset
#php func iconv_strrpos(str String, search String, offset Int = 0) Int  // would return false on not found

#php func mb_strwidth(str String, encoding String = #default)
#php func mb_strtoupper(str String) String
#php func mb_strtolower(str String) String

// bytes mode functions
#php func strlen(str) UInt
#php func substr(str, start Int, length Int = #default) String

#php func str_contains(master, search) Bool
#php func strpos(master, search, offset Int = 0) Int  // would return false on not found
#php func strrpos(master, search, offset Int = 0) Int  // would return false on not found
#php func strtoupper(str) String
#php func strtolower(str) String

// replace in binary mode
#php func strtr(master String, changes Dict) String
#php func str_replace(search, replacement, master String) String
public _str_replace(master String, search, replacement) {
	return str_replace(search, replacement, master);
}

#php func implode(glue String, pieces) String
#php func explode(delimiter String, master String) String.Array

// array
#php func count(array) UInt
#php func in_array(needle, haystack, strict Bool = false) Bool
#php func array_reverse(array)
#php func array_map(callback Callable, items Array) Array
#php func array_filter(items Array, callback Callable, flag Int = #default) Array
#php func array_reduce(items Array, callback Callable, initial Any = #default)

// index array
#php func array_slice(master Array, offset Int, length UInt = none) Array
#php func array_unshift(master Array, item Any) UInt
#php func array_shift(master Array) Any
#php func array_push(master Array, item Any) UInt
#php func array_pop(master Array) Any
#php func array_search(search, master, strict = false) UInt

public _array_search(master Array, search)  {
	key = array_search(search, master, true)
	return key === false ? false : key
}

public array_last_index(array Array) UInt {
	return count(array) - 1
}

#php func array_key_exists(key, arr) Bool

// assoc array
#php func array_keys(dict) String.Array
#php func array_values(dict) Array
#php func array_column(recordset Any.Array, key String) Array

public dict_get(dict Dict, key String) {
	return dict[key] ?? none
}

public _dict_search(master Dict, search) {
	key = array_search(search, master, true)
	return key === false ? false : key#String
}

#php const JSON_UNESCAPED_UNICODE Int
#php const JSON_PRETTY_PRINT Int
#php func json_encode(data, flags Int = 0, depth UInt = 512) String
#php func json_decode(data, assoc Bool = false, depth UInt = 512, flags Int = 0) Any

#php const ENT_QUOTES Int
#php func htmlspecialchars(string String, flags Int = #default, encoding String = #default, double_encode = #default) String
#php func htmlspecialchars_decode(string String, flags Int = #default) String

public html_encode(string String?, flags = ENT_QUOTES) {
	return empty(string) ? string : htmlspecialchars(string, flags)
}

public html_decode(string String?, flags = ENT_QUOTES) {
	return empty(string) ? string : htmlspecialchars_decode(string, flags)
}

// regex
#php const PREG_SPLIT_DELIM_CAPTURE Int
#php func preg_match(regex Regex, subject String, matches mut Array? = #default, flags Int = #default, offset Int = #default) Bool
#php func preg_match_all(regex Regex, subject String, matches mut Array? = #default, flags Int = #default, offset Int = #default) Bool
#php func preg_split(regex Regex , subject String, limit Int = #default, flags Int = #default) Array
public regex_test(regex Regex, subject String) Bool {
	return preg_match(regex, subject) ? true : false
}
public regex_capture(regex Regex, subject String) String.Array? {
	var result String.Array
	count = preg_match(regex, subject, result)
	return count === 0 ? none : result
}
public regex_capture_all(regex Regex, subject String) String.Array.Array? {
	var results String.Array.Array
	count = preg_match_all(regex, subject, results)
	return results
}

// 所有 masked function 在定义时都需要考虑参数的顺序，参数的运行时序不一致可能会导致问题
// 考虑禁止在调用函数的参数中改变数据（需要推断出可能改变数据的函数，或直接禁止参数带函数调用），纯表达式?
// 部分实现中，参数编译后顺序有变化，使用时应避免当前字符串被delimiter表达式所改变

// public interface IShareAble {
// 	vshare() Object
// }

// public interface ICloneAble {
// 	vclone() Object
// }

#tea MetaType {}
#tea UnionType {}

// primitive types

#tea Void {} // cannot use for value

#tea None {}

// extends String to use the String properties/methods
#tea Any: String {}

#tea String {
	// process in dist native mode
	masked length UInt => strlen(this)

	masked contains(val) => str_contains(this, val)
	masked find(str String, offset Int = #default) => strpos(this, str, offset)
	masked find_last(str String, offset Int = #default) => strrpos(this, str, offset)
	masked copy(start Int, length Int = #default) => substr(this, start, length)
	masked lower_case() => strtolower(this)
	masked upper_case() => strtoupper(this)

	// process in byte mode
	masked byte_length UInt => strlen(this)
	masked byte_find(str String, offset Int = #default) => strpos(this, str, offset)
	masked byte_find_last(str String, offset Int = #default) => strrpos(this, str, offset)
	masked byte_copy(start Int, length Int = #default) => substr(this, start, length)
	masked byte_lower() => strtolower(this)
	masked byte_upper() => strtoupper(this)

	// process in rune mode
	masked rune_length UInt => iconv_strlen(this)
	masked rune_find(str String, offset Int = #default) => iconv_strpos(this, str, offset)
	masked rune_find_last(str String, offset Int = #default) => iconv_strrpos(this, str, offset)
	masked rune_copy(start Int, length Int = #default) => iconv_substr(this, start, length)
	masked rune_lower() => mb_strtolower(this)
	masked rune_upper() => mb_strtoupper(this)

	// other
	masked count_width() UInt => mb_strwidth(this)
	masked split(delimiter String) => explode(delimiter, this)
	masked replace(search, replacement) => _str_replace(this, search, replacement)
}

#tea Int: String {
	masked abs() UInt => abs(this)
}

#tea UInt: Int {}

#tea Float {
	masked abs() => abs(this)
	masked ceil() => ceil(this)
	masked floor() => floor(this)
	masked round(precision = 0) => round(this, precision)
}

#tea Bool {}

#tea Array {
	masked length UInt => count(this)
	masked end UInt => array_last_index(this)

	masked has(key Int) => array_key_exists(key, this)
	masked contains(val) => in_array(val, this)

	masked find(val) => _array_search(this, val) // find the index for supported value

	masked copy(start Int, length UInt = #default) Array => array_slice(this, start, length)
	masked reversed() Array => array_reverse(this)

	masked unshift(item) => array_unshift(this, item)
	masked shift() => array_shift(this)
	masked push(item) => array_push(this, item)
	masked pop() => array_pop(this)

	// callback(item)
	masked map(callback Callable) => array_map(callback, this)

	// callback(carry, item)
	masked reduce(callback Callable, initial Any = #default) => array_reduce(this, callback, initial)

	// callback(item) Bool
	masked filter(callback Callable) => array_filter(this, callback)

	masked join(glue String = LF) => implode(glue, this)
}

#tea Dict {
	masked length => count(this)

	masked keys() => array_keys(this)
	masked values() => array_values(this)

	masked has(key String) => array_key_exists(key, this)
	masked contains(val) => in_array(val, this)

	masked get(key String) => dict_get(this, key)
	masked find(val) => _dict_search(this, val) // find the key with supported value

	masked join(glue String = LF) => implode(glue, this)
}

#tea Object {
	//
}

// primitive types end

#tea Regex {
	// match in target string, returns is matched
	masked test(string String) Bool => regex_test(this, string)

	// use this pattern to separate a string, returns the separated items
	masked separate(string String) String.Array => preg_split(this, string)

	// match in target string, returns the first captured item
	masked capture(string String) String.Array => regex_capture(this, string)

	// match in target string, returns the all captured items
	masked capture_all(string String) String.Array.Array => regex_capture_all(this, string)
}

#tea XView: String {}   // accept IView

#tea Callable {}

#tea Iterable {} // accept Iterator

public interface IView {}

#php interface Iterator {
	current() Any
	key() String
	next()
	rewind()
	valid() Bool
}

// the full Generator haven't supported by yet

// end
