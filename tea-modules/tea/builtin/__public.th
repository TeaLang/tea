// the public declarations

#unit tea\builtin

public const LF String
#php const __DIR__ String
#php const __FILE__ String
#php const __LINE__ UInt
#php const __CLASS__ UInt
#php const __FUNCTION__ UInt
#php const INPUT_GET Int
#php const INPUT_POST Int
#php const INPUT_COOKIE Int
#php const INPUT_ENV Int
#php const INPUT_SERVER Int
#php const FILTER_INT Int
#php const FILTER_EMAIL Int
#php const FILE_APPEND Int
#php const LOCK_EX Int
#php const JSON_UNESCAPED_UNICODE Int
#php const JSON_PRETTY_PRINT Int
#php const ENT_QUOTES Int
#php const PREG_SPLIT_DELIM_CAPTURE Int

#php func isset(expr Any) Bool

#php func is_int(val Any) Bool

#php func is_array(val Any) Bool

#php func is_numeric(val Any) Bool

#php func empty(expr Any) Bool

#php func var_dump(expr0 Any, expr1 Any = #default, expr2 Any = #default, expr3 Any = #default)

#php func print(expr Any) Int

#php func print_r(expr Any, is_return Bool = #default)

#php func header(info String, replace Bool = true, http_response_code Int = #default)

#php func time() Int

#php func date(format String, timestamp Int = #default) String

#php func strtotime(datetime Any, now Int = #default) Int

#php func str_repeat(input Any, multiplier Int) String

#php func filter_input(type Int, key String, filter Int = #default, options Dict = #default) Any

#php class Exception {
	public construct(message String, code Int = 0)
	public getCode() Int
	public getMessage() String
}

#php class ErrorException: Exception {
	// no any
}

#php class LogicException: Exception {
	// no any
}

public func is_uint(val Any) Bool

public func uint_ensure(num Int) Int

public func is_strict_array(it Any) Bool

public func is_strict_dict(it Any) Bool

public func xrange(start Int, end Int, step Int = 1) Iterator

#php func file_exists(filename Any) Bool

#php func dirname(path Any, levels UInt = #default) String

#php func basename(path Any, suffix String = #default) String

#php func realpath(path Any) String

#php func chdir(dir Any) Bool

#php func unlink(file Any) Bool

#php func file_get_contents(file Any) String

#php func file_put_contents(file Any, data String, flags Int = #default) UInt

#php func pow(num Any, exponent Any) UInt

#php func max(n1 Any, n2 Any, n3 Any = #default) Any

#php func min(n1 Any, n2 Any, n3 Any = #default) Any

#php func abs(val Any) Float

#php func round(val Any, precision Int = 0) Float

#php func ceil(val Any) Int

#php func floor(val Any) Int

#php func trim(str Any, char_mask String = #default) String

#php func rtrim(str Any, char_mask String = #default) String

#php func ltrim(str Any, char_mask String = #default) String

#php func iconv_strlen(str String) UInt

#php func iconv_substr(str String, start Int, length Int = #default) String

#php func iconv_strpos(str String, search String, offset Int = 0) Int

#php func iconv_strrpos(str String, search String, offset Int = 0) Int

#php func mb_strwidth(str String, encoding String = #default)

#php func mb_strtoupper(str String) String

#php func mb_strtolower(str String) String

#php func strlen(str Any) UInt

#php func substr(str Any, start Int, length Int = #default) String

#php func str_contains(master Any, search Any) Bool

#php func strpos(master Any, search Any, offset Int = 0) Int

#php func strrpos(master Any, search Any, offset Int = 0) Int

#php func strtoupper(str Any) String

#php func strtolower(str Any) String

#php func strtr(master String, changes Dict) String

#php func str_replace(search Any, replacement Any, master String) String

public func _str_replace(master String, search Any, replacement Any) String

#php func implode(glue String, pieces Any) String

#php func explode(delimiter String, master String) String.Array

#php func count(array Any) UInt

#php func in_array(needle Any, haystack Any, strict Bool = false) Bool

#php func array_reverse(array Any)

#php func array_map(callback Callable, items Array) Array

#php func array_filter(items Array, callback Callable, flag Int = #default) Array

#php func array_reduce(items Array, callback Callable, initial Any = #default)

#php func array_slice(master Array, offset Int, length UInt = none) Array

#php func array_unshift(master Array, item Any) UInt

#php func array_shift(master Array) Any

#php func array_push(master Array, item Any) UInt

#php func array_pop(master Array) Any

#php func array_search(search Any, master Any, strict Bool = false) UInt

public func _array_search(master Array, search Any) Bool|UInt

public func array_last_index(array Array) UInt

#php func array_key_exists(key Any, arr Any) Bool

#php func array_keys(dict Any) String.Array

#php func array_values(dict Any) Array

#php func array_column(recordset Any.Array, key String) Array

public func dict_get(dict Dict, key String) Any

public func _dict_search(master Dict, search Any) Bool|String

#php func json_encode(data Any, flags Int = 0, depth UInt = 512) String

#php func json_decode(data Any, assoc Bool = false, depth UInt = 512, flags Int = 0) Any

#php func htmlspecialchars(string String, flags Int = #default, encoding String = #default, double_encode Any = #default) String

#php func htmlspecialchars_decode(string String, flags Int = #default) String

public func html_encode(string String, flags Int = ENT_QUOTES) String

public func html_decode(string String, flags Int = ENT_QUOTES) String

#php func preg_match(regex Regex, subject String, matches mut Array = #default, flags Int = #default, offset Int = #default) Bool

#php func preg_match_all(regex Regex, subject String, matches mut Array = #default, flags Int = #default, offset Int = #default) Bool

#php func preg_split(regex Regex, subject String, limit Int = #default, flags Int = #default) Array

public func regex_test(regex Regex, subject String) Bool

public func regex_capture(regex Regex, subject String) String.Array

public func regex_capture_all(regex Regex, subject String) String.Array.Array

#tea class MetaType {
	// no any
}

#tea class UnionType {
	// no any
}

#tea class Void {
	// no any
}

#tea class None {
	// no any
}

#tea class Any: String {
	// no any
}

#tea class String {
	masked length UInt

	masked contains(val Any) Bool

	masked find(str String, offset Int = #default) Int

	masked find_last(str String, offset Int = #default) Int

	masked copy(start Int, length Int = #default) String

	masked lower_case() String

	masked upper_case() String

	masked byte_length UInt

	masked byte_find(str String, offset Int = #default) Int

	masked byte_find_last(str String, offset Int = #default) Int

	masked byte_copy(start Int, length Int = #default) String

	masked byte_lower() String

	masked byte_upper() String

	masked rune_length UInt

	masked rune_find(str String, offset Int = #default) Int

	masked rune_find_last(str String, offset Int = #default) Int

	masked rune_copy(start Int, length Int = #default) String

	masked rune_lower() String

	masked rune_upper() String

	masked count_width() UInt

	masked split(delimiter String) String.Array

	masked replace(search Any, replacement Any) String
}

#tea class Int: String {
	masked abs() UInt
}

#tea class UInt: Int {
	// no any
}

#tea class Float {
	masked abs() Float

	masked ceil() Int

	masked floor() Int

	masked round(precision Int = 0) Float
}

#tea class Bool {
	// no any
}

#tea class Array {
	masked length UInt

	masked end UInt

	masked has(key Int) Bool

	masked contains(val Any) Bool

	masked find(val Any) Bool|UInt

	masked copy(start Int, length UInt = #default) Array

	masked reversed() Array

	masked unshift(item Any) UInt

	masked shift() Any

	masked push(item Any) UInt

	masked pop() Any

	masked map(callback Callable) Array

	masked reduce(callback Callable, initial Any = #default)

	masked filter(callback Callable) Array

	masked join(glue String = LF) String
}

#tea class Dict {
	masked length UInt

	masked keys() String.Array

	masked values() Array

	masked has(key String) Bool

	masked contains(val Any) Bool

	masked get(key String) Any

	masked find(val Any) Bool|String

	masked join(glue String = LF) String
}

#tea class Object {
	// no any
}

#tea class Regex {
	masked test(string String) Bool

	masked separate(string String) String.Array

	masked capture(string String) String.Array

	masked capture_all(string String) String.Array.Array
}

#tea class XView: String {
	// no any
}

#tea class Callable {
	// no any
}

#tea class Iterable {
	// no any
}

public interface IView {
	// no any
}

#php interface Iterator {
	current() Any
	key() String
	next()
	rewind()
	valid() Bool
}

// program end
