// the public declarations

namespace tea\builtin

runtime const __DIR__ String
runtime const __FILE__ String
runtime const __LINE__ UInt
runtime const __CLASS__ UInt
runtime const __FUNCTION__ UInt
runtime const INPUT_GET Int
runtime const INPUT_POST Int
runtime const INPUT_COOKIE Int
runtime const INPUT_ENV Int
runtime const INPUT_SERVER Int
runtime const FILTER_INT Int
runtime const FILTER_EMAIL Int
runtime const FILE_APPEND Int
runtime const LOCK_EX Int
runtime const JSON_UNESCAPED_UNICODE Int
runtime const JSON_PRETTY_PRINT Int
runtime const ENT_QUOTES Int
runtime const PREG_SPLIT_DELIM_CAPTURE Int
public const LF #String

runtime func isset(expr Any) Bool

runtime func is_int(val #Any) Bool

runtime func is_array(val #Any) Bool

runtime func is_numeric(val #Any) Bool

runtime func exit(status Int|String)

runtime func empty(expr Any) Bool

runtime func var_dump(expr0 Any, expr1 Any = #default, expr2 Any = #default, expr3 Any = #default) #Void

runtime func print(expr #Any) Int

runtime func print_r(expr #Any, is_return Bool = #default) #Void

runtime func header(info String, replace #Bool = true, http_response_code Int = #default) #Void

runtime func time() Int

runtime func date(format String, timestamp Int = #default) String

runtime func strtotime(datetime #Any, now Int = #default) Int

runtime func str_repeat(input #Any, multiplier Int) String

runtime func filter_input(type Int, key String, filter Int = #default, options Dict = #default) String?

runtime class Exception {
	public construct(message String, code Int = 0) #Void
	public getCode() Int
	public getMessage() String
}

runtime class ErrorException: Exception {
	// no any
}

runtime class LogicException: Exception {
	// no any
}

runtime func file_exists(filename #Any) Bool

runtime func dirname(path #Any, levels UInt = #default) String

runtime func basename(path #Any, suffix String = #default) String

runtime func realpath(path #Any) String

runtime func chdir(dir #Any) Bool

runtime func unlink(file #Any) Bool

runtime func file_get_contents(file #Any) String

runtime func file_put_contents(file #Any, data String, flags Int = #default) UInt

runtime func pow(num #Any, exponent #Any) UInt|Int|Float

runtime func max(n1 #Any, n2 #Any = #default, n3 #Any = #default) Int|UInt|Float

runtime func min(n1 #Any, n2 #Any = #default, n3 #Any = #default) Int|UInt|Float

runtime func abs as int_abs(val #Any) UInt

runtime func abs(val #Any) Float

runtime func round(val #Any, precision #Int = 0) Float

runtime func ceil(val #Any) Int

runtime func floor(val #Any) Int

runtime func trim(it String, characters String = #default) String

runtime func rtrim(it String, characters String = #default) String

runtime func ltrim(it String, characters String = #default) String

runtime func mb_strlen(it String) UInt

runtime func mb_substr(it String, start Int, length Int = #default) String

runtime func mb_strpos(it String, search String, offset Int = 0) UInt

runtime func mb_strrpos(it String, search String, offset Int = 0) UInt

runtime func mb_strtoupper(it String) String

runtime func mb_strtolower(it String) String

runtime func strlen(it #Any) UInt

runtime func substr(it #Any, start Int, length Int = #default) String

runtime func str_contains(it #Any, search #Any) Bool

runtime func strpos(it #Any, search #Any, offset Int = 0) UInt

runtime func strrpos(it #Any, search #Any, offset Int = 0) UInt

runtime func strtoupper(it #Any) String

runtime func strtolower(it #Any) String

runtime func strtr(it String, changes Dict) String

runtime func str_replace(search #Any, replacement #Any, it String) String

runtime func implode(glue String, pieces #Any) String

runtime func explode(delimiter String, it String) String.Array

runtime func count(array #Any) UInt

runtime func in_array(needle #Any, haystack #Any, strict Bool = false) Bool

runtime func array_reverse(array #Any) Array

runtime func array_map(callback (item #Any) Any, items Array) Array

runtime func array_filter(items Array, callback (item #Any) Any, flag Int = #default) Array

runtime func array_reduce(items Array, callback (carry #Any, item #Any) Any, initial Any = #default) Any

runtime func array_slice(it Array, offset Int, length UInt = none) Array

runtime func array_unshift(it Array, item Any) UInt

runtime func array_shift(it Array) Any

runtime func array_push(it Array, item Any) UInt

runtime func array_pop(it Array) Any

runtime func array_search as list_search(search #Any, it #Any, strict #Bool = false) UInt|Bool

runtime func array_search as dict_search(search #Any, it #Any, strict #Bool = false) String|Int|Bool

runtime func array_key_exists(key #Any, arr #Any) Bool

runtime func array_keys(it #Any) String.Array

runtime func array_values(it #Any) Array

runtime func array_column(recordset Array|Dict, key String) Array

runtime func array_replace as dict_replace(it Dict, replacement Dict) Dict

runtime func json_encode(data #Any, flags Int = 0, depth UInt = 512) String

runtime func json_decode(data #Any, assoc Bool = false, depth UInt = 512, flags Int = 0) Any

runtime func htmlspecialchars(string String, flags Int = #default, encoding String = #default, double_encode #Any = #default) String

runtime func htmlspecialchars_decode(string String, flags Int = #default) String

runtime func preg_match(regex Regex, subject String, matches inout Array? = #default, flags Int = #default, offset Int = #default) Bool

runtime func preg_match_all(regex Regex, subject String, matches inout Array? = #default, flags Int = #default, offset Int = #default) Bool

runtime func preg_split(regex Regex, subject String, limit Int = #default, flags Int = #default) String.Array

runtime interface Iterator {
	current() Any
	key() Int|String
	next() #Void
	rewind() #Void
	valid() Bool
}

public func is_uint(val #Any) Bool

public func uint_ensure(num Int) #Int

public func html_escape(str String?) String

public func html_unescape(str String?) String

public type MetaType {
	// no any
}

public type UnionType {
	// no any
}

public type Void {
	// no any
}

public type None {
	// no any
}

public type Any {
	// no any
}

public func _std_split(it String, separator String) #String.Array

public func _std_replace(it String, search #Any, replacement #Any) #String

public type Bytes {
	masked length #UInt

	masked find(str String, offset Int = #default) #UInt

	masked find_last(str String, offset Int = #default) #UInt

	masked copy(start Int, length UInt = #default) #String
}

public type String {
	masked length #UInt

	masked find(str String, offset Int = #default) #UInt

	masked find_last(str String, offset Int = #default) #UInt

	masked copy(start Int, length UInt = #default) #String

	masked contains(val String) #Bool

	masked lowercase() #String

	masked uppercase() #String

	masked split(separator String) #String.Array

	masked replace(search #Any, replacement #Any) #String

	masked trim(characters String = #default) #String

	masked ltrim(characters String = #default) #String

	masked rtrim(characters String = #default) #String
}

public type Pures: String {
	// no any
}

public type Int {
	masked abs() UInt
}

public type UInt: Int {
	// no any
}

public type Float {
	masked abs() #Float

	masked ceil() #Int

	masked floor() #Int

	masked round(precision #Int = 0) #Float
}

public type Bool {
	// no any
}

public func _has(it Array|Dict, key String|Int) #Bool

public func _vals_contains(it Array|Dict, val #Any, strict Bool = false) #Bool

public func _array_find(it Array, val #Any) #UInt|Bool

public func _std_array_map(it Array, callback (item Any) Any) #Array

public func _std_join(it Array|Dict, separator String) #String

public type Array {
	masked length UInt

	masked has(key Int) #Bool

	masked contains(val #Any) #Bool

	masked find(val #Any) #UInt|Bool

	masked join(separator String = LF) #String

	masked copy(start Int, length UInt = #default) #Array

	masked reversed() #Array

	masked unshift(item #Any) #UInt

	masked shift() #Any

	masked push(item #Any) #UInt

	masked pop() #Any

	masked map(callback (item #Any) Any) #Array

	masked filter(callback (item #Any) Any) #Array

	masked reduce(callback (carry #Any, item #Any) Any, initial Any = #default) #Any
}

public func _dict_find(it Dict, val #Any) #String|Int|Bool

public func _dict_get(it Dict, key String|Int) #Any

public type Dict {
	masked length #UInt

	masked has(key String) #Bool

	masked contains(val #Any) #Bool

	masked find(val #Any) #String|Int|Bool

	masked join(separator String = LF) #String

	masked get(key String|Int) #Any

	masked keys() #String.Array

	masked values() #Array

	masked replace(replacement Dict) #Dict
}

public type Object {
	// no any
}

public func _regex_test(regex Regex, subject String) Bool

public func _regex_capture(regex Regex, subject String) String.Array?

public func _regex_capture_all(regex Regex, subject String) String.Array.Array?

public type Regex {
	masked test(string String) #Bool

	masked separate(string String) #String.Array

	masked capture(string String) #String.Array?

	masked capture_all(string String) #String.Array.Array?
}

public func _build_attributes(items Dict, additions Dict = none) String

public type XView {
	// no any
}

public type Callable {
	// no any
}

public type Iterable {
	// no any
}

public interface IView {
	// no any
}

public type Self {
	// no any
}

// program end
