// the public declarations

namespace tea\builtin

extern const INPUT_GET Int
extern const INPUT_POST Int
extern const INPUT_COOKIE Int
extern const INPUT_ENV Int
extern const INPUT_SERVER Int
extern const FILTER_INT Int
extern const FILTER_EMAIL Int
extern const __DIR__ String
extern const __FILE__ String
extern const __LINE__ UInt
extern const __CLASS__ UInt
extern const __FUNCTION__ UInt
extern const PHP_INT_MIN Int
extern const PHP_INT_MAX UInt
extern const FILE_APPEND Int
extern const LOCK_EX Int
extern const JSON_UNESCAPED_UNICODE Int
extern const JSON_PRETTY_PRINT Int
extern const ENT_QUOTES Int
extern const PREG_SPLIT_DELIM_CAPTURE Int
public const LF #String

extern func filter_input(type Int, key String, filter Int = #default, options Dict = #default) String?

extern func isset(expr Any) Bool

extern func is_int(val) Bool

extern func is_array(val) Bool

extern func is_numeric(val) Bool

extern func exit(status Int|String)

extern func empty(expr Any) Bool

extern func var_dump(expr0 Any, expr1 Any = #default, expr2 Any = #default, expr3 Any = #default) #Void

extern func print(expr) Int

extern func print_r(expr, is_return Bool = #default) #Void

extern func header(info String, replace #Bool = true, http_response_code Int = #default) #Void

extern func time() Int

extern func date(format String, timestamp Int = #default) String

extern func strtotime(datetime, now Int = #default) Int

extern interface Iterator {
	current() Any
	key() Int|String
	next() #Void
	rewind() #Void
	valid() Bool
}

extern interface ArrayAccess {
	offsetExists(offset Any) Bool
	offsetGet(offset Any) Any
	offsetSet(offset Any, value Any) #Void
	offsetUnset(offset Any) #Void
}

extern interface Stringable {
	public __toString() String
}

extern class stdClass {
	// no any
}

extern interface Throwable: Stringable {
	public getMessage() String
	public getPrevious() Throwable
	public getCode() Int
	public getFile() String
	public getLine() Int
	public getTrace() Array
	public getTraceAsString() String
}

extern class Exception: Throwable {
	public construct(message String, code Int = 0, previous Throwable = none) #Void
}

extern class ErrorException: Exception {
	// no any
}

extern class LogicException: Exception {
	// no any
}

extern class RuntimeException: Exception {
	// no any
}

extern func file_exists(filename) Bool

extern func dirname(path, levels UInt = #default) String

extern func basename(path, suffix String = #default) String

extern func realpath(path) String

extern func chdir(dir) Bool

extern func unlink(file) Bool

extern func file_get_contents(file) String

extern func file_put_contents(file, data String, flags Int = #default) UInt

extern func pow(num, exponent) UInt|Int|Float

extern func max(n1, n2 #Any = #default, n3 #Any = #default) Int|UInt|Float

extern func min(n1, n2 #Any = #default, n3 #Any = #default) Int|UInt|Float

extern func abs as int_abs(val) UInt

extern func abs(val) Float

extern func round(val, precision #UInt = 0) Float

extern func ceil(val) Int

extern func floor(val) Int

extern func trim(it String, characters String = #default) String

extern func rtrim(it String, characters String = #default) String

extern func ltrim(it String, characters String = #default) String

extern func mb_strlen(it String) UInt

extern func mb_substr(it String, start Int, length Int = #default) String

extern func mb_strpos(it String, search String, offset Int = 0) UInt

extern func mb_strrpos(it String, search String, offset Int = 0) UInt

extern func mb_strtoupper(it String) String

extern func mb_strtolower(it String) String

extern func strlen(it) UInt

extern func substr(it, start Int, length Int = #default) String

extern func str_contains(it, search) Bool

extern func strpos(it, search, offset Int = 0) UInt

extern func strrpos(it, search, offset Int = 0) UInt

extern func strtoupper(it) String

extern func strtolower(it) String

extern func strtr(it String, from_chars_or_pairs String|Dict, to_chars String? = #default) String

extern func str_replace(search, replacement, it String) String

extern func implode(glue String, pieces) String

extern func explode(delimiter String, it String) String.Array

extern func str_repeat(input, multiplier Int) String

extern func count(array) UInt

extern func in_array(needle, haystack, strict Bool = false) Bool

extern func array_reverse(array) Array

extern func array_map(callback (item) Any, items0 Array, items1 Array? = #default) Array

extern func array_filter(items Array, callback (item) Any = #default, mode Int = #default) Array

extern func array_reduce(items Array, callback (carry, item) Any, initial Any = #default) Any

extern func array_slice(it Array, offset Int, length UInt = none) Array

extern func array_unshift(it Array, item Any) UInt

extern func array_shift(it Array) Any

extern func array_push(it Array, item Any) UInt

extern func array_pop(it Array) Any

extern func array_search as list_search(search, it, strict #Bool = false) UInt|Bool

extern func array_search as dict_search(search, it, strict #Bool = false) String|Int|Bool

extern func array_key_exists(key, arr) Bool

extern func array_keys(it) String.Array

extern func array_values(it) Array

extern func array_column(recordset Array|Dict, key_or_val_col String, val_col String = #default) Array

extern func array_replace as dict_replace(it Dict, replacement Dict) Dict

extern func json_encode(data, flags Int = 0, depth UInt = 512) String

extern func json_decode(data, assoc Bool = false, depth UInt = 512, flags Int = 0) Any

extern func htmlspecialchars(string String, flags Int = #default, encoding String = #default, double_encode #Any = #default) String

extern func htmlspecialchars_decode(string String, flags Int = #default) String

extern func preg_match(regex Regex, subject String, matches inout Array? = #default, flags Int = #default, offset Int = #default) Bool

extern func preg_match_all(regex Regex, subject String, matches inout Array? = #default, flags Int = #default, offset Int = #default) Bool

extern func preg_split(regex Regex, subject String, limit Int = #default, flags Int = #default) String.Array

extern class PDO {
	internal const FETCH_ASSOC Int
	internal const FETCH_COLUMN Int
	construct(dsn String, username String = #default, passwd String = #default, options Dict = #default) #Void
	exec(statement String) Int
	query(statement String, fetchMode Int? = #default) PDOStatement
	quote(string String, parameter_type Int = #default) String
	lastInsertId(name String = #default) String
	getAttribute(attribute Int) Any

	beginTransaction() Bool
	commit() Bool
	rollback() Bool
	inTransaction() Bool

	errorCode() String
	errorInfo() Array
}

extern class PDOStatement {
	fetch(mode Int = #default) String.Dict
	fetchAll(mode Int = #default, column_or_class_or_func Int|String|Callable = #default) String.Dict.Array
	fetchColumn(column UInt = 0) Any
	fetchObject(class MetaType = #default, constructorArgs Array = #default) Object|Bool
}

extern class PDOException: RuntimeException {
	public errorInfo Array?
}

public func is_uint(val) Bool

public func uint_ensure(num Int) #Int

public func html_escape(str String?) String

public func html_unescape(str String?) String

public type MetaType {
	// no any
}

public type UnionType {
	// no any
}

public type Void {
	// no any
}

public type None {
	// no any
}

public type Any {
	// no any
}

public func _std_split(it String, separator String) #String.Array

public func _std_replace(it String, search, replacement) #String

public type Bytes {
	masked length #UInt

	masked find(str String, offset Int = #default) #UInt

	masked find_last(str String, offset Int = #default) #UInt

	masked copy(start Int, length UInt = #default) #String
}

public type String {
	masked length #UInt

	masked find(str String, offset Int = #default) #UInt

	masked find_last(str String, offset Int = #default) #UInt

	masked copy(start Int, length UInt = #default) #String

	masked contains(val String) #Bool

	masked lowercase() #String

	masked uppercase() #String

	masked split(separator String) #String.Array

	masked replace(search, replacement) #String

	masked trim(characters String = #default) #String

	masked ltrim(characters String = #default) #String

	masked rtrim(characters String = #default) #String
}

public type Pures: String {
	// no any
}

public type Int {
	masked abs() UInt
}

public type UInt: Int {
	// no any
}

public type Float {
	masked abs() #Float

	masked ceil() #Int

	masked floor() #Int

	masked round(precision #UInt = 0) #Float
}

public type Bool {
	// no any
}

public func _has(it Array|Dict, key String|Int) #Bool

public func _vals_contains(it Array|Dict, val, strict Bool = false) #Bool

public func _array_find(it Array, val) #UInt|Bool

public func _std_array_map(it Array, callback (item Any) Any) #Array

public func _std_join(it Array|Dict, separator String) #String

public type Array {
	masked length UInt

	masked has(key Int) #Bool

	masked contains(val) #Bool

	masked find(val) #UInt|Bool

	masked join(separator String = LF) #String

	masked copy(start Int, length UInt = #default) #Array

	masked reversed() #Array

	masked unshift(item) #UInt

	masked shift() #Any

	masked push(item) #UInt

	masked pop() #Any

	masked map(callback (item) Any) #Array

	masked filter(callback (item) Any) #Array

	masked reduce(callback (carry, item) Any, initial Any = #default) #Any
}

public func _dict_find(it Dict, val) #String|Int|Bool

public func _dict_get(it Dict, key String|Int) #Any

public type Dict {
	masked length #UInt

	masked has(key String) #Bool

	masked contains(val) #Bool

	masked find(val) #String|Int|Bool

	masked join(separator String = LF) #String

	masked get(key String|Int) #Any

	masked keys() #String.Array

	masked values() #Array

	masked replace(replacement Dict) #Dict
}

public type Object {
	// no any
}

public func _regex_test(regex Regex, subject String) Bool

public func _regex_capture(regex Regex, subject String) String.Array?

public func _regex_capture_all(regex Regex, subject String) String.Array.Array?

public type Regex {
	masked test(string String) #Bool

	masked separate(string String) #String.Array

	masked capture(string String) #String.Array?

	masked capture_all(string String) #String.Array.Array?
}

public func _build_attributes(items Dict, additions Dict? = none) String

public type XView {
	// no any
}

public type Callable {
	// no any
}

public type Iterable {
	// no any
}

public interface IView {
	// no any
}

public type Self {
	// no any
}

// program end
